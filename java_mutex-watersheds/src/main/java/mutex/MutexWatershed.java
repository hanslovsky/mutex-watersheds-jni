/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mutex;

import net.imglib2.Dimensions;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.type.numeric.RealType;
import net.imglib2.util.Intervals;
import net.imglib2.view.composite.Composite;


public class MutexWatershed {

    public static <T extends RealType<T>, C extends Composite<T>> int[] mutexWatershed(
            final RandomAccessibleInterval<C> affinities,
            final long[]... offsets
    ) {
        final int[] assignments = new int[(int) Intervals.numElements(affinities)];
        mutexWatershed(affinities, assignments, makeOffsetStrides(affinities, offsets));
        return assignments;
    };

    private static native <T extends RealType<T>, C extends Composite<T>> void mutexWatershed(
            final RandomAccessibleInterval<C> affinities,
            final int[] assignments,
            final long... offsetStrides
    );

    private static long[] makeOffsetStrides(
            final Dimensions dimensions,
            final long[]... offsets) {
        final long[] strides = new long[dimensions.numDimensions()];
        strides[0] = 1L;
        for (int d = 1; d < strides.length; ++d)
            strides[d] = strides[d-1] * dimensions.dimension(d-1);
        final long[] offsetStrides = new long[offsets.length];
        for (int i = 0; i < offsetStrides.length; ++i)
            for (int d = 0; d < offsets[i].length; ++d)
                offsetStrides[i] += strides[d] * offsets[i][d];
        return offsetStrides;
    }

    static {
        System.loadLibrary("r_mutex_watersheds_jni");
    }
}
